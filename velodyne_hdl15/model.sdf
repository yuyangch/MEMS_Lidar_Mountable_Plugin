<?xml version="1.0"?>
<sdf version="1.5">
<model name="velodyne_hdl_15">
  <!-- Give the base link a unique name -->
  <!--plugin name="velodyne_control" filename="libvelodyne_plugin.so"/-->
  <plugin name="velodyne_control" filename="libvelodyne_plugin.so"/>

  <link name="base">
    
    <!-- Offset the base by half the lenght of the cylinder -->
    <pose>0 0 0.029335 0 0 0</pose>
    <inertial>
      <mass>.0000000012</mass>
      <inertia>
        <ixx>0.000001087473</ixx>
        <iyy>0.000001087473</iyy>
        <izz>0.000001092437</izz>
        <ixy>0</ixy>
        <ixz>0</ixz>
        <iyz>0</iyz>
      </inertia>
    </inertial>
    
    <collision name="base_collision">
      <geometry>
        <cylinder>
         
          <radius>.04267</radius>
          <length>.05867</length>
        </cylinder>
      </geometry>
    </collision>
    

    <!-- The visual is mostly a copy of the collision -->
    <visual name="base_visual">
      <!-- Offset the visual by have the base's height. We are not rotating
           mesh since symmetrical -->
      <pose>0 0 -0.029335 0 0 0</pose>
      <geometry>
        <mesh>
          <uri>model://velodyne_hdl15/meshes/velodyne_base.dae</uri>
        </mesh>
      </geometry>
    </visual>
  </link>

  <!-- Give the base link a unique name -->
  <link name="top">

    <!-- Add a ray sensor, and give it a name -->
    <sensor type="ray" name="sensor">
    <plugin name="velodyne_sensor" filename="libgazebo_ros_velodyne_laser.so">
      <topicName>/libgazebo_ros_velodyne_laser</topicName>
      <frameName>base</frameName>
      <updateRate>100</updateRate>
    </plugin>
    <!--plugin name="velodyne_sensor" filename="/opt/ros/noetic/lib/libgazebo_ros_block_laser.so"/-->
    <!--plugin name="velodyne_sensor" filename="libmemslidar_sensor_plugin.so"-->
      <!-- Position the ray sensor based on the specification. Also rotate
           it by 90 degrees around the X-axis so that the <horizontal> rays
           become vertical -->
      <!--<pose>0 0 -0.004645 1.5707 0 0</pose>-->
		<pose>0 0 -0.004645 1.5707 0 1.5707</pose>
      <!-- Enable visualization to see the rays in the GUI -->
      <visualize>true</visualize>

      <!-- Set the update rate of the sensor -->
      <update_rate>100</update_rate>
      <ray>
        <noise>
          <!-- Use gaussian noise -->
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.00</stddev>
        </noise>
        <!-- The scan element contains the horizontal and vertical beams.
             We are leaving out the vertical beams for this tutorial. -->
        <scan>

          <!-- The horizontal beams -->
          <vertical>
            <!-- The velodyne has 32 beams(samples) CHEN:CHANGE TO 1 FOR MEMS LIDAR-->
            <samples>1</samples> 

            <!-- Resolution is multiplied by samples to determine number of
                 simulated beams vs interpolated beams. See:
                 http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
                 -->
            <resolution>1</resolution>

            <!-- Minimum angle in radians -->
            <min_angle>-0.0</min_angle>

            <!-- Maximum angle in radians -->
            <max_angle>0.0</max_angle>
          </vertical>
          <horizontal>
            <!-- The velodyne has 32 beams(samples) CHEN:CHANGE TO 1 FOR MEMS LIDAR-->
            <samples>1</samples>

            <!-- Resolution is multiplied by samples to determine number of
                 simulated beams vs interpolated beams. See:
                 http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
                 -->
            <resolution>1</resolution>

            <!-- Minimum angle in radians -->
            <min_angle>-0.0</min_angle>

            <!-- Maximum angle in radians -->
            <max_angle>0.0</max_angle>
          </horizontal>
        </scan>

        <!-- Range defines characteristics of an individual beam -->
        <range>

          <!-- Minimum distance of the beam -->
          <min>0.05</min>

          <!-- Maximum distance of the beam -->
          <max>70</max>

          <!-- Linear resolution of the beam -->
          <resolution>0.02</resolution>
        </range>
    </ray>
    </sensor>

    <!-- Vertically offset the top cylinder by the length of the bottom
        cylinder and half the length of this cylinder. -->
    <!--<pose>0 0 0.095455 0 0 0</pose>-->
    <pose>0 0 0.095455 0 0 0</pose>
    <inertial>
      <mass>0.000000001</mass>
      <inertia>
        <ixx>0.000090623</ixx>
        <iyy>0.000090623</iyy>
        <izz>0.000091036</izz>
        <ixy>0</ixy>
        <ixz>0</ixz>
        <iyz>0</iyz>
      </inertia>
    </inertial>
    
    <collision name="top_collision">
      <geometry>
        <cylinder>
          
          <radius>0.0004267</radius>
          <length>0.0007357</length>
        </cylinder>
      </geometry>
    </collision>
	
    <!-- The visual is mostly a copy of the collision -->
    <visual name="top_visual">
      <!-- Lower the mesh by half the height, and rotate by 90 degrees -->
      <!--<pose>0 0 -0.0376785 0 0 1.5707</pose> -->
      <pose>0 0 -0.0376785 0 0 3.1415926535897932384626433832795</pose>
      <geometry>
        <!-- The mesh tag indicates that we will use a 3D mesh as
             a visual -->
        <mesh>
          <!-- The URI should refer to the 3D mesh. The "model:"
              URI scheme indicates that the we are referencing a Gazebo
              model. -->
          <uri>model://velodyne_hdl15/meshes/velodyne_top.dae</uri>
        </mesh>
      </geometry>
    </visual>
  </link>

  
  <joint type="universal" name="elevation_joint">

    <!-- Position the joint at the bottom of the top link -->
    <pose>0 0 -0.036785 0 0 0</pose>

    <!-- Use the base link as the parent of the joint -->
    <parent>base</parent>

    <!-- Use the top link as the child of the joint -->
    <child>top</child>

    <!-- The axis defines the joint's degree of freedom -->
    <axis>

      <!-- Revolve around the x-axis -->
      <xyz>1 0 0</xyz>

      <!-- Limit refers to the range of motion of the joint -->
      <limit>

        <!-- Use a very large number to indicate a continuous revolution -->
        <lower>-1.57</lower>
        <upper>1.57</upper>
      </limit>
    </axis>
    <axis2>

      <!-- Revolve around the z-axis -->
      <xyz>0 0 1</xyz>

      <!-- Limit refers to the range of motion of the joint -->
      <limit>

        <!-- Use a very large number to indicate a continuous revolution -->
        <lower>-1.57</lower>
        <upper>1.57</upper>
      </limit>
    </axis2>
  </joint>
</model>
</sdf>
